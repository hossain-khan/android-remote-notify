package dev.hossain.remotenotify.model

import dev.hossain.remotenotify.db.AlertConfigEntity

const val BATTERY_PERCENTAGE_NONE = -1
const val STORAGE_MIN_SPACE_GB_NONE = -1

/**
 * Sealed interface representing different types of remote alerts that can be configured.
 * These alerts are typically created by one device (e.g. phone app) and sent to another
 * device (e.g. Wear OS device) to monitor certain conditions.
 */
sealed interface RemoteAlert {
    /**
     * Unique identifier for the alert configuration.
     * This is usually auto-generated by the database.
     */
    val alertId: Long

    /**
     * Represents an alert condition based on battery percentage.
     * The alert is typically triggered when the battery level drops to or below the specified [batteryPercentage].
     *
     * @property alertId Unique ID for the alert.
     * @property batteryPercentage The battery percentage threshold to trigger the alert.
     */
    data class BatteryAlert(
        override val alertId: Long = 0,
        val batteryPercentage: Int,
    ) : RemoteAlert

    /**
     * Represents an alert condition based on available storage space.
     * The alert is typically triggered when the available storage space drops to or below the specified [storageMinSpaceGb].
     *
     * @property alertId Unique ID for the alert.
     * @property storageMinSpaceGb The minimum available storage space in Gigabytes (GB) to trigger the alert.
     */
    data class StorageAlert(
        override val alertId: Long = 0,
        val storageMinSpaceGb: Int,
    ) : RemoteAlert
    
    /**
     * Represents a plugin notification request from an external app.
     * This allows other apps to send notifications through the configured mediums.
     *
     * @property alertId Unique ID for the alert.
     * @property title The title/subject of the notification.
     * @property message The body content of the notification.
     * @property sourcePackage Package name of the requesting app.
     * @property sourceAppName Human-readable name of the requesting app.
     * @property priority Priority level of the notification.
     * @property requestId Unique identifier for tracking the request.
     */
    data class PluginAlert(
        override val alertId: Long = 0,
        val title: String,
        val message: String,
        val sourcePackage: String,
        val sourceAppName: String,
        val priority: String,
        val requestId: String,
    ) : RemoteAlert
}

/**
 * Converts a [RemoteAlert] sealed type to its corresponding [AlertConfigEntity] for database persistence.
 * @return [AlertConfigEntity] representing the database model of the alert.
 */
internal fun RemoteAlert.toAlertConfigEntity(): AlertConfigEntity =
    when (this) {
        is RemoteAlert.BatteryAlert ->
            AlertConfigEntity(
                id = alertId,
                batteryPercentage = batteryPercentage,
                type = AlertType.BATTERY,
                storageMinSpaceGb = 0,
            )
        is RemoteAlert.StorageAlert ->
            AlertConfigEntity(
                id = alertId,
                storageMinSpaceGb = storageMinSpaceGb,
                type = AlertType.STORAGE,
                batteryPercentage = 0,
            )
        is RemoteAlert.PluginAlert -> 
            // Plugin alerts are not persisted to database, return default
            AlertConfigEntity(
                id = alertId,
                batteryPercentage = 0,
                type = AlertType.BATTERY, // Default type
                storageMinSpaceGb = 0,
            )
    }

/**
 * Converts a [RemoteAlert] to its corresponding [AlertType].
 * @return The [AlertType] enum value.
 */
internal fun RemoteAlert.toAlertType(): AlertType =
    when (this) {
        is RemoteAlert.BatteryAlert -> AlertType.BATTERY
        is RemoteAlert.StorageAlert -> AlertType.STORAGE
        is RemoteAlert.PluginAlert -> AlertType.BATTERY // Default for plugin alerts
    }

/**
 * Converts an [AlertConfigEntity] from the database to its corresponding [RemoteAlert] sealed type.
 * @return [RemoteAlert] representing the specific alert type.
 */
internal fun AlertConfigEntity.toRemoteAlert(): RemoteAlert =
    when (type) {
        AlertType.BATTERY -> RemoteAlert.BatteryAlert(id, batteryPercentage)
        AlertType.STORAGE -> RemoteAlert.StorageAlert(id, storageMinSpaceGb)
    }

/**
 * Provides a user-friendly display name for the [RemoteAlert] type.
 * This can be used in UI elements like list items or notification titles.
 *
 * Example: "Battery" for [RemoteAlert.BatteryAlert].
 *
 * @return A string representing the display name of the alert type.
 */
internal fun RemoteAlert.toTypeDisplayName(): String =
    when (this) {
        is RemoteAlert.BatteryAlert -> "Battery"
        is RemoteAlert.StorageAlert -> "Storage"
        is RemoteAlert.PluginAlert -> "Plugin: $sourceAppName"
    }
