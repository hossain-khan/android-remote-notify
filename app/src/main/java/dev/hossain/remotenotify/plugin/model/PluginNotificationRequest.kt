package dev.hossain.remotenotify.plugin.model

import androidx.annotation.Keep

/**
 * Data model representing a notification request from an external app through the plugin interface.
 * This is the primary model used for cross-app communication.
 */
@Keep
data class PluginNotificationRequest(
    /**
     * The title of the notification. This will be used as the subject line for emails
     * or the main heading for other notification types.
     */
    val title: String,
    
    /**
     * The main content/body of the notification message.
     */
    val message: String,
    
    /**
     * Package name of the requesting app. This is automatically filled by the provider
     * for security and tracking purposes.
     */
    val sourcePackage: String = "",
    
    /**
     * Human-readable name of the requesting app. Automatically filled by the provider.
     */
    val sourceAppName: String = "",
    
    /**
     * Priority level of the notification. Affects delivery behavior and formatting.
     * @see PluginContract.Priority
     */
    val priority: String = PluginContract.Priority.NORMAL,
    
    /**
     * Timestamp when the notification request was created. Automatically filled by the provider.
     */
    val timestamp: Long = 0L,
    
    /**
     * Unique identifier for tracking this notification request. Auto-generated by the provider.
     */
    val requestId: String = "",
    
    /**
     * Current status of the notification request.
     * @see PluginContract.Status
     */
    val status: String = PluginContract.Status.PENDING,
    
    /**
     * Error message if the notification failed to send.
     */
    val errorMessage: String? = null,
    
    /**
     * Optional list of preferred notification mediums. If specified, the plugin will
     * attempt to use these mediums in order of preference. If null or empty,
     * all configured mediums will be used.
     * 
     * Example values: ["email", "telegram", "slack"]
     */
    val preferredMediums: List<String>? = null
) {
    companion object {
        /**
         * Creates a basic notification request with just title and message.
         * Other fields will be filled automatically by the plugin provider.
         */
        fun create(title: String, message: String): PluginNotificationRequest {
            return PluginNotificationRequest(
                title = title,
                message = message
            )
        }
        
        /**
         * Creates a notification request with priority specification.
         */
        fun create(
            title: String, 
            message: String, 
            priority: String
        ): PluginNotificationRequest {
            return PluginNotificationRequest(
                title = title,
                message = message,
                priority = priority
            )
        }
        
        /**
         * Creates a notification request with preferred mediums.
         */
        fun create(
            title: String, 
            message: String, 
            preferredMediums: List<String>
        ): PluginNotificationRequest {
            return PluginNotificationRequest(
                title = title,
                message = message,
                preferredMediums = preferredMediums
            )
        }
    }
}

/**
 * Import for PluginContract to access priority and status constants.
 */
private object PluginContract {
    object Priority {
        const val LOW = "low"
        const val NORMAL = "normal"
        const val HIGH = "high"
    }
    
    object Status {
        const val PENDING = "pending"
        const val SENT = "sent"
        const val FAILED = "failed"
    }
}