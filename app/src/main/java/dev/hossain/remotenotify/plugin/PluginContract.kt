package dev.hossain.remotenotify.plugin

import android.content.ComponentName
import android.net.Uri

/**
 * Contract definition for the plugin architecture that allows external apps to leverage
 * the notification mediums configured in this app.
 *
 * This follows the ContentProvider contract pattern for cross-app communication.
 * External apps can use this contract to send notifications through the configured
 * notification channels (Email, Telegram, Twilio, Slack, Webhooks).
 */
object PluginContract {
    
    /**
     * The authority for the plugin content provider.
     * External apps will use this authority to access the plugin functionality.
     */
    const val AUTHORITY = "dev.hossain.remotenotify.plugin"
    
    /**
     * Base content URI for the plugin provider.
     */
    val BASE_CONTENT_URI: Uri = Uri.parse("content://$AUTHORITY")
    
    /**
     * Notification requests path.
     * Used to send notification requests to the app.
     */
    const val PATH_NOTIFICATIONS = "notifications"
    
    /**
     * Configuration path.
     * Used to check available notification mediums and their status.
     */
    const val PATH_CONFIG = "config"
    
    /**
     * Status path.
     * Used to check the plugin service status and health.
     */
    const val PATH_STATUS = "status"
    
    /**
     * Content URI for sending notification requests.
     */
    val NOTIFICATIONS_URI: Uri = BASE_CONTENT_URI.buildUpon()
        .appendPath(PATH_NOTIFICATIONS)
        .build()
    
    /**
     * Content URI for checking configuration and available mediums.
     */
    val CONFIG_URI: Uri = BASE_CONTENT_URI.buildUpon()
        .appendPath(PATH_CONFIG)
        .build()
    
    /**
     * Content URI for checking plugin status.
     */
    val STATUS_URI: Uri = BASE_CONTENT_URI.buildUpon()
        .appendPath(PATH_STATUS)
        .build()
    
    /**
     * MIME type for notification requests.
     */
    const val CONTENT_TYPE_NOTIFICATION = "vnd.android.cursor.item/vnd.remotenotify.notification"
    
    /**
     * MIME type for configuration data.
     */
    const val CONTENT_TYPE_CONFIG = "vnd.android.cursor.dir/vnd.remotenotify.config"
    
    /**
     * MIME type for status data.
     */
    const val CONTENT_TYPE_STATUS = "vnd.android.cursor.item/vnd.remotenotify.status"
    
    /**
     * Column definitions for notification requests.
     */
    object NotificationColumns {
        /** The title of the notification (required) */
        const val TITLE = "title"
        
        /** The message body of the notification (required) */
        const val MESSAGE = "message"
        
        /** The source app package name (auto-filled by provider) */
        const val SOURCE_PACKAGE = "source_package"
        
        /** The source app name (auto-filled by provider) */
        const val SOURCE_APP_NAME = "source_app_name"
        
        /** Priority level: low, normal, high (optional, default: normal) */
        const val PRIORITY = "priority"
        
        /** Timestamp of the notification request (auto-filled by provider) */
        const val TIMESTAMP = "timestamp"
        
        /** Request ID for tracking (auto-generated by provider) */
        const val REQUEST_ID = "request_id"
        
        /** Status of the notification: pending, sent, failed */
        const val STATUS = "status"
        
        /** Error message if the notification failed */
        const val ERROR_MESSAGE = "error_message"
        
        /** Comma-separated list of preferred notification mediums (optional) */
        const val PREFERRED_MEDIUMS = "preferred_mediums"
    }
    
    /**
     * Column definitions for configuration queries.
     */
    object ConfigColumns {
        /** The notification medium name (email, telegram, etc.) */
        const val MEDIUM_NAME = "medium_name"
        
        /** Display name of the medium */
        const val MEDIUM_DISPLAY_NAME = "medium_display_name"
        
        /** Whether the medium is configured and ready to use */
        const val IS_CONFIGURED = "is_configured"
        
        /** Whether the medium is currently available (not rate-limited, etc.) */
        const val IS_AVAILABLE = "is_available"
        
        /** Additional configuration details (JSON format) */
        const val CONFIG_DETAILS = "config_details"
    }
    
    /**
     * Column definitions for status queries.
     */
    object StatusColumns {
        /** Overall plugin service status */
        const val SERVICE_STATUS = "service_status"
        
        /** Plugin API version */
        const val API_VERSION = "api_version"
        
        /** Number of configured notification mediums */
        const val CONFIGURED_MEDIUMS_COUNT = "configured_mediums_count"
        
        /** Last notification sent timestamp */
        const val LAST_NOTIFICATION_TIMESTAMP = "last_notification_timestamp"
        
        /** Total notifications sent today */
        const val NOTIFICATIONS_SENT_TODAY = "notifications_sent_today"
        
        /** Plugin service uptime */
        const val UPTIME = "uptime"
    }
    
    /**
     * Priority levels for notifications.
     */
    object Priority {
        const val LOW = "low"
        const val NORMAL = "normal" 
        const val HIGH = "high"
    }
    
    /**
     * Status values for notification requests.
     */
    object Status {
        const val PENDING = "pending"
        const val SENT = "sent"
        const val FAILED = "failed"
    }
    
    /**
     * Service status values.
     */
    object ServiceStatus {
        const val ACTIVE = "active"
        const val INACTIVE = "inactive"
        const val ERROR = "error"
    }
    
    /**
     * Current plugin API version.
     * Increment this when making breaking changes to the plugin interface.
     */
    const val API_VERSION = 1
    
    /**
     * Permission required to access the plugin functionality.
     * External apps must declare this permission in their manifest.
     */
    const val PERMISSION = "dev.hossain.remotenotify.plugin.ACCESS"
}